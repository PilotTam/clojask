(sum [1 3 4])
(add [1 3 4])
(select-keys {:asd 23 :sad 24} :asd)
(select-keys {:asd 23 :sad 24} [:asd])
(dataframe)
(dataframe 
)
exit
(dataframe "./resources/Employees.csv"
)
(dataframe "./resources/Employees.csv")
(dataframe)
exit
(def x (dataframe "resources/Employees.csv"))
x
(.colDesp x)
(.operate x println :Salary)
(.compute x "resources/test.csv")
(.operate x Double/parse-double  :Salary)
(.operate x Double/parse-int  :Salary)
(.operate x Double/valueOf  :Salary)
(.operate x -  :Salary)
(.operate x log  :Salary)
(def x (dataframe "resources/Employees.csv"))
x
(.compute x "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x "resources/test.csv")
(defn tmp
[value]
(- (Integer/parseInt value)))
(.operate x tmp :Employee)
(.compute x "resources/test.csv")
(.operate x tmp :Employe)
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
x
(.compute x "resources/test.csv")
(repeat 2)
exit
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.operate x println :Employee)
(.compute x "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.operate x println :Employee)
(.compute x "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
exit
(def x (dataframe "resources/Employees.csv"))
(.operate x println :Employee)
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
exit
(def x (dataframe "resources/test.csv"))
(def x (dataframe "resources/Employees.csv"))
(.compute x "resources/test.csv")
(.getMap x)
(.getDesp x)
(.colDesp x)
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x "resources/test.csv")
(loop [x [1 2 3]]
    (println (first x))
    (recur (rest x)))
(loop [x [1 2 3]]
    (if (= x nil)
        0
        (recur (rest x))))
(def x (dataframe "resources/Employees.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "resources/Employees.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP-sorted-cleaned.csv"))
(.compute x "resources/test.csv")
(defn test-func
[ele]
(- (Integer/parseInt ele))
)
(.operate x test-func :Salary)
(.compute x "resources/test.csv")
(def x (dataframe "resources/Employees.csv"))
(.operate x test-func :Salary)
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP.csv"))
(.compute x "resources/test.csv")
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP.csv"))
exit
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP.csv"))
exit
(dataframe)
exit
(def x (dataframe "/Users/lyc/Desktop/RA clojure/data-sorted-cleaned/data-CRSP.csv"))
exit
(dataframe)
exit
(def x (dataframe "resources/Employees.csv"))
(defn neg
[value]
(- (Integer/parseInt value)))
(.operate x neg :Salary)
(.compute x "resources/test.csv")
(defmacro test 
[]
))
(defmacro test 
[str]
(println str))
(test "sdfsdgas")
(def y 3)
(test y)
(eval (read-string "(println 3)"))
(.operate x Integer/parseInt :Salary)
(.operate x Integer.parseInt :Salary)
(def x (dataframe "resources/Employees.csv"))
(.compute x "resources/test.csv")
(.operate x parseInt :Salary)
(.operate x Integer/parseInt :Salary)
(.operate x neg :Employee)
(.compute x "resources/test.csv")
(DFIntf)
(DFIntf. )
(DataFrame. )
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 1 "resources/test.csv")
(.compute x 1 "resources/test.csv" nil)
(.compute x 1 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
x
exit
(def x (dataframe "resources/Employees.csv"))
x
(.compute x 1 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 1 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 1 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 1 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 1 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 2 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 2 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 2 "resources/test.csv")
(.compute x  "resources/test.csv")
(.compute x 2 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 2 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 2 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(.compute x 2 "resources/test.csv")
(.compute x 1 "resources/test.csv")
(.operate x - :Department)
(.compute x 1 "resources/test.csv")
exit
(.operate x - :Department)
(def x (dataframe "resources/Employees.csv"))
(.compute x 1 "resources/test.csv")
exit
(.compute x 1 "resources/test.csv")
(def x (dataframe "resources/Employees.csv"))
(.compute x 1 "resources/test.csv")
(.compute x 1 "resources/test.csv" :exception false)
(.compute x 1 "resources/test.csv" :exception true)
(.compute x 1 "resources/test.csv")
(.compute x 1 "resources/test.csv" nil)
exit
(def x (dataframe "resources/Employees.csv"))
(compute x 1 "resources/test.csv")
exit
(def x (dataframe "resources/Employees.csv"))
(compute x 1 "resources/test.csv")
(compute x 1 "resources/test.csv" :exception true)
(= :sd :sd)
(.operate x - :Department)
(compute x 1 "resources/test.csv")
(compute x 1 "resources/test.csv" :exception true)
exit
(def x (dataframe "resources/Employees.csv"))
(compute x 1 "resources/test.csv" :exception true)
exit
(ColInfo. )
exit
(def x (dataframe "resources/Employees.csv"))
(.setType x int :Salary)
(.setType x "int" :Salary)
(.operate x - :Salary)
(compute x 1 "resources/test.csv" :exception true)
(.getDesc x)
(.colDesc x)
exit
(def x (dataframe "resources/Employees.csv"))
(.setType x int :Salary)
(.setType x "int" :Salary)
(compute x 1 "resources/test.csv" :exception true)
(.colDesc x)
exit
(def x (dataframe "resources/Employees.csv"))
(.setType x "int" :Salary)
(.colDesc x)
(compute x 1 "resources/test.csv" :exception true)
(.operate x - :Salary)
(compute x 1 "resources/test.csv" :exception true)
(str int)
(identity int)
exit
(def x (dataframe "resources/Employees.csv"))
(.setType x "int" :Salary)
(col-type (col-info x))
(col-info x)
(:col-info x)
(:col-type (:col-info x))
(:col-type (:col-inf x))
(:col-keys (:col-info x))
(.setType x "string" :Salary)
(.operate x - :Salary)
(compute x 1 "resources/test.csv" :exception true)
(.colDesc x)
exit
(def x (dataframe "resources/Employees.csv"))
(.setType x "int" :Salary)
(.colTypes x)
(def x (dataframe "resources/Employees.csv"))
(compute x 2 "resources/test.csv" :exception true)
(def x (dataframe "resources/Employees.csv"))
(.setType x "int" :Salary)
(.operate x - :Salary)
(defn add15
[value]
(+ value 1.5))
(.operate x add15 :Salary)
(compute x 1 "resources/test.csv" :exception true)
(compute x 1 "resources/test.csv" :exception false)
exit
(def x (dataframe "resources/Employees.csv"))
(defn add15
[value]
(+ value 1.5))
(.setType x "int" :Salary)
(.operate x add15 :Salary)
(compute x 1 "resources/test.csv" :exception true)
(compute x 1 "resources/test.csv" :exception false)
(.colType x)
(.colTypes x)
(.setType x "long" :Salary)
(def x (dataframe "resources/Employees.csv"))
(compute x 1 "resources/test.csv" :exception false)
(compute x 2 "resources/test.csv" :exception false)
exit
(def x (dataframe "resources/Employees.csv"))
(compute x 2 "resources/test.csv" :exception false)
exit
(def x (dataframe "resources/Employees.csv"))
(compute x 2 "resources/test.csv" :exception false)
exit
(def x (dataframe "resources/Employees.csv"))
(compute x 2 "resources/test.csv" :exception false)
exit
(def x (dataframe "resources/Employees.csv"))
(compute x 2 "resources/test.csv" :exception false)
exit
(def x (dataframe "resources/Employees.csv"))
(compute x 2 "resources/test.csv" :exception false)
exit
(def x (dataframe "resources/Employees.csv"))
(compute x 2 "resources/test.csv" :exception false)
(def x (dataframe "resources/Employees.csv"))
exit
